hi man. Integrated Oracle Documaker Enterprise Edition with Silanis using Web Services to e­sign 
documents. Developed REST APIs for Dials ­  Clock Based Calendar App with Sync using Node.js. C (Intermediate), Java (Intermediate), Ruby (Novice), Javascript (Novice). Linux (Novice).
\documentclass{article}
\usepackage{graphicx}
\graphicspath{{/home/kedar/Pictures/}}
\begin{document}
\paragraph{1.}
To Prove or disprove $(n+a)^b=\Theta(n)^b$ where $a$ and $b>0$ are constants
\newline\newline
Soln: Let us try to prove $(n+a)^b=\Theta(n)^b$\newline
To prove it, we ned to show $c_{1}(n)^b\leq(n+a)^b\leq c_{2}(n)^b$
\newline
ie we need to show $(n+a)^b=\Omega (n)^b$ and $(n+a)^b=\mathcal{O} (n)^b$
\newline
\newline
To prove: $(n+a)^b\leq c_{2}(n)^b$\newline
Let us ignore the power 'b' on both sides. As $b>0$, the equality still holds good.
Hence, $$(n+a)\leq c_{2} n$$
For $n \geq |a|$
$$(n+a) \leq (n+|a|) \leq (c_{2}n)$$
\newline
For this equation to satisfy, we can take $c_{2}=2$.
Because $'a'$ can be either positive or negative, following equation holds good $$(n+a)\leq (2n)$$
Now taking 'b' power on both the sides,$$(n+a)^b \leq (n+|a|)^b \leq (2n)^b$$
$$(n+a)^b \leq (2n)^b$$
Hence, $$(n+a)^b\leq c_{2}(n)^b$$ for $c_{2}\geq2$ and $n_{0}\geq|a|$
\newline\newline
Now we shall prove $c_{1}(n)^b\leq(n+a)^b$
\newline
Again, let us ignore the power 'b' on both sides. As $b>0$, the equality still holds good.
$$c_{1}(n)\leq(n+a)$$
For $n\geq2|a|, c_{2}\geq \frac{1}{2}$ (this means $\frac{n}{2}\geq |a|$)
\newline
Because $'a'$ can be either positive or negative, following equation holds good
$$\frac{1}{2}n \leq (n+\frac{n}{2})$$
$$\frac{1}{2}n \leq (n+a)$$
Raising both the sides of question to power $'b'$
$$(\frac{1}{2})^bn^b \leq (n+a)^b$$
Hence we proved $$c_{1}(n)^b\leq(n+a)^b$$ Where $n_{0}\geq 2|a|$ and $c_{1}=\frac{1}{2}^b$
\newline
\newline
Therefore \textbf{$(n+a)^b=\Theta(n)^b$. For $c_{1}=(\frac{1}{2})^b$, $c_{2}\geq2$ and $n_{0}\geq 2|a|$}.\newline
This proof shows that adding or subtracting a constant term to running time and then taking a power will not affect the asymptotic growth.
\newline
\rule{\textwidth}{1pt}
\newline

\paragraph{}
2.(a) $2^{n+1} = \mathcal{O}(2)^n$\newline
$$2^{n+1} \leq c_{1}(2)^n$$
$$2^n.2^1 \leq c_{1}2^n$$
Dividing both sides by $2^n$, $$2^1 \leq c_{1}$$
$$c_{1} \geq 2$$
Hence for $n \geq 1$ and $c_{1} \geq 2$, $$2^{n+1} \leq c_{1}2^n$$
\newline
\rule{\textwidth}{1pt}
\newline
2.(b) $2^{2n} = \mathcal{O} (2)^n$
\newline
$$2^{2n} \leq c_{1}(2)^n$$
$$2^{n}.2^{n} \leq c_{1}(2)^n$$
Dividing both sides by $(2)^n$
$$2^{n} \leq c_{1}$$
This means
$$c_{1} \geq 2^{n}$$
This cannot be true as $c_{1}$ must be a constant and 'n' cannot be a constant.
Hence $$2^{n+1} \neq \mathcal{O}(2)^n$$
\newline
\rule{\textwidth}{1pt}
\newline
2.(c) $3^n=\mathcal{O}(2)^{2n}$\newline
$$3^n \leq c_{1}(2)^{2n}$$
Divide Both the sides by $2^{2n}$
$$\frac{3^n}{2^{2n}} \leq c_{1}$$
$$(\frac{3}{2^2})^{n} \leq c_{1}$$
$$(\frac{3}{4})^{n} \leq c_{1}$$
$$c_{1} \geq (\frac{3}{4})^{n}$$
This cannot be true as $c_{1}$ must be a constant and $(\frac{3}{4})^{n}$ cannot be a constant.
Hence $$3^n \neq \mathcal{O}(2)^{2n}$$
\newline
\rule{\textwidth}{1pt}
\newline

3.
\newline
\underline{To hire exactly one person}:
\newline
Let us assume there are total of $'n'$ candidates. We know that first candidate will get hired. To answer our question, we have to find the probability that the first candidate is the best candidate among all the $'n'$ candidates.
\newline
\newline
This means first candidate has highest rank. Obviously, rest of $(n-1)$ candidates will have rank lesser than best candidates and they can come to interview in $(n-1)!$ ways. And there $n!$ ways of ordering the candidates. Hence, $$=\frac{(n-1)!}{n!}$$ $$=\frac{1}{n}$$ 
\newline
Hence the probability of hiring only once is $$\frac{1}{n}$$
\newline
\underline{To hire exactly $'n'$ candidates}:
\newline
We know that all the candidates will be interviewed in random order. Hence there are $n!$ ways of interviewing candidates
\newline
To hire exactly $'n'$, the order of candidates interviewed should have ascending order ranks(this is possible because the rank of candidates will have total order).
\newline
Out of $n!$, only one can have this order.
\newline
\newline
Hence the probability to hire exactly $n$ candidates is $$\frac{1}{n!}$$
\newline
\rule{\textwidth}{1pt}
\newline

4.
\newline
we know that the first candidate will be hired for sure. Let the rank of first candidate be $'i'$. The probability of first candidate to have any rank from 1 to n is $$\frac{1}{n}$$. In order to hire exactly twice, the next hire should be the best candidate.
\newline
The candidates who have rank less than first candidate($<i$) will not be hired. The next candidate to be hired will have rank from $i+1$ to $n$. Among $i+1$ to $n$ rank candidates, whoever comes to interview first will be hired.
\newline
There are $n-i$ candidates from $i+1$ to $nth$ rank $(n-(i+1)+1 = n-i)$. 
\newline
Hence, the probability of best candidate is hired after first candidate is $$\frac{1}{n-i}$$ 
For all ranks from 1 to n-1,
$$\sum_{i=1}^{n-1} \frac{1}{n}\frac{1}{n-i}$$
$$\frac{1}{n}\sum_{i=1}^{n-1}\frac{1}{n-i}$$
$$\frac{1}{n}(ln(n-1))$$               [1]

5.
\newline
Two stacks can be maintained in a single array by having top of the two respective stacks at the end of stacks as shown below. The stack 1 and stack 2 have top 1 and top 2 respectively. Initially, stack1's top will point to -1 and stack2's top will point to (n+1) as there are no elemenets in either of them.\newline
\includegraphics[scale=0.6]{stack}

If the an attempt is made to pop from either of the stack at this stage then "stack underflow" error will be thrown.\newline 

When an element is inserted to either of the stack the "top" of stack will be updated. If an element is pushed onto first stack, then "top" of stack 1 will be incremented and pushed element will be stored( stack[top1$++$] = element). If an element is pushed onto second stack, then "top" of stack 2 will be decremented and pushed element will be stored(stack[top2$--$] = element). Hence the push operation is $O(1)$\newline

\underline{Push Algorithm}\newline
if (push to stack1)\newline
\indent if $((top1+1)>=top2)$                    //this means stack has overflown\newline
\indent \indent print "stack overflow error"\newline
\indent else\newline
\indent \indent $stack[top1++] = element;$\newline
\indent endif\newline
\indent else if push to stack2\newline
\indent \indent if$((top2-1) <= top1))$                   //this means stack has overflown\newline
\indent print "stack overflow error"\newline
  else\newline
\indent \indent $stack[top2--] = element;$\newline
\indent endif\newline
endif\newline

The below figure shows when stack1 has 3 elements pushed and stack 2 has 5 elements pushed.\newline
\includegraphics[scale=0.6]{stack1}
The below figure shows when stack1 has 3 elements pushed and stack 2 has 7 elements pushed. The stack is full and any attempts to add any more elements to either of the stacks will result in "stack overflow" error.\newline
\includegraphics[scale=0.6]{stack2}

Pop Operation
when an attempt is made to pop from an stack which is empty(ie top = NIL) then "stack underflown" error will be thrown.\newline
\newline
\underline{Pop Algorithm}\newline
if(pop from stack1)\newline
\indent if($top1 == -1$)\newline
\indent \indent print stack underflow error                     //this means stach has unserflown \newline
\indent else\newline
\indent \indent return $stack[top1--]$\newline
\indent endif\newline
if(pop from stack2)\newline
\indent if($top2 == n+1$)\newline
\indent \indent print stack underflow error                   //this means stach has unserflown \newline
\indent else\newline
\indent \indent return $stack[top2++]$\newline
\indent endif\newline
endif\newline
\newline
The below snapshot shows when 2 elements from stack1 and 3 elements from stack2 are popped.\newline
\includegraphics[scale=0.6]{stack3}
As we can see this stack supports push and pop operations in $O(1)$ and supports stack under and overflow condition. Especially, the stack overflow condition is raised when we try to push another element when there are total of $'n'$ from both the stack. 




\textbf{REFERENCES}
\newline
[1]Introduction to algorithms, third edition: Cormen. Page no. 1147. Harmonic Series




\end{document}
The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed processing. Threads require less overhead than "forking" or spawning a new process because the system does not initialize a new system virtual memory space and environment for the process. While most effective on a multiprocessor system, gains are also found on uniprocessor systems which exploit latency in I/O and other system functions which may halt process execution. (One thread may execute while another is waiting for I/O or some other system latency.) Parallel programming technologies such as MPI and PVM are used in a distributed computing environment while threads are limited to a single computer system. All threads within a process share the same address space. A thread is spawned by defining a function and its arguments which will be processed in the thread. The purpose of using the POSIX thread library in your software is to execute software faster.The POSIX thread libraries are a standards based thread API for C/C++. It allows one to spawn a new concurrent process flow. It is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor thus gaining speed through parallel or distributed